#!/bin/bash
# This script comes with no warranty …use at own risk
# Copyright (C) 2014  Mike Krüger
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program or from the site that you downloaded it
# from; if not, write to the Free Software Foundation, Inc., 59 Temple
# Place, Suite 330, Boston, MA  02111-1307   USA
#
# my personal Arch Linux Installation script
# Version Beta 1

RESULT=0
COUNTER=0
TOTAL_HDD_SIZE=0
TOTAL_RAM_SIZE=0
#SWAP_SIZE=0
ROOT_SIZE=0
#HOME_SIZE=0
#BOOT_SIZE=200
PID=0
HOSTNAME=''
LANGUAGE=''
KEYMAP=''
ANSWER=''
TIMEZONE=''
ARCH=''
ARCH_ROOT='/mnt'
USERNAME=''
HDD_NAME=''
declare -a CHOISE_ARRAY

function first_choise() {
  clear
  echo "************************************************"
  echo "************************************************"
  echo "*********                             **********"
  echo "*********      ARCH FIX 2014          **********"
  echo "*********                             **********"
  echo "********* A ARCH INSTALLATION SCRIPT  **********"
  echo "*********                             **********"
  echo "*********        CREATED BY           **********"
  echo "*********        MEMORYLEAKY          **********"
  echo "*********                             **********"
  echo "************************************************"
  echo "************************************************"
  echo ""
  message_print 0 "This script comes with no warranty …use at own risk"
  
  echo ""
  echo "Whitch Step you want to execute now"
  CHOISE_ARRAY[0]="The first part partitioned your hard drive and install the base system"
  CHOISE_ARRAY[1]="The second part install all packages (xfce,cups,lightdm...) you need to have a good desktop experience"
  choise_menu
  if [ $RESULT -eq 1 ]
  then
    unset_menu_items
    dolanguage
    dokeymap
    dotimezone
    enter_hostname
    partitioning
    install_base
  else
     unset_menu_items
#    load_configs
#    optimize_mirrorlist
#    install_yaourt
#    user_config
#    adduser
#    install_powerpill
#    install_compress_tools
#    install_alsa
#    install_pulse
#    install_bash_goodies
#    install_avahi_deamon
#    install_ntfs_tools
#    install_openssh
#    readahead_on
#    install_xserver
#    install_video_driver
#    install_infinality_font_config
#    install_cups
#    install_xfce
#    install_lightdm
    
    #clean package cache
     pacman -Scc --noconfirm
    
#    install_plank
#    install_archey
#    install_libreoffice
#    install_gimp
#    install_inkscape
#    install_firewall
#    install_gaming_stuff
#    install_extra_gtk_apps
#    install_extra_qt_apps
#    install_audio_tools_and_codec
#    install_video_tools_and_codec
    
    #clean package cache
     pacman -Scc --noconfirm
#    install_fonts
#    install_java
#    install_internet_tools
    
    #clean package cache
    pacman -Scc --noconfirm
    resecure_sudoers
    clear
    echo "finished!....."
    sleep 2
    reboot
  fi
  
  return 0
}

function message_print() {
  if [ "$1" = 1 ]
  then
    # green
    color="32"
  else
    # red
    color="31"
  fi
  
  printf "\033[0;${color}m**$2**\033[m \n"
  return 0
}


function question_yesno() {
  while true; do
    read -p "$1" yn
    case $yn in
      [Yy]* ) RESULT=1; break;;
      [Nn]* ) RESULT=0; break;;
      * ) echo "Please answer yes or no.";;
    esac
  done
  return 0
}

function choise_menu() {
  COUNTER=0
  for i in "${CHOISE_ARRAY[@]}"
  do
    COUNTER=$(( $COUNTER + 1 ))
    echo '['$COUNTER'] '$i
  done
  
  while true; do
    read -p "Make your choise |1|2|3... " number
    if [ "$number" -ge 1 -a "$number" -le $COUNTER ];
    then
      RESULT=$number
      break
    else
      message_print 0 "Please select a valid number!"
    fi
  done
  return 0
}

function unset_menu_items() {
  unset CHOISE_ARRAY
  declare -a CHOISE_ARRAY
  return 0
}


function stop_spinner() {
  kill -s SIGHUP $PID &
  { wait $PID; } &> /dev/null
  PID=0
  return 0
}

function start_spinner() {
  setterm -cursor off
  parts=( "|" "/" "-" "\\" )
  
  while [ 1 ];
  do
    for ix in 0 1 2 3;
    do
      echo -en ${parts[$ix]}
      sleep .1
      echo -en "\b"
    done
  done
  return 0
}

function spinner()  {
  if [ $1 == "start" ];
  then
    if [ $PID -eq 0 ];
    then
      start_spinner&
      PID=$!
    fi
  elif [ $1 == "stop" ];
  then
    if [ $PID -ne 0 ];
    then
      stop_spinner
    fi
  fi
  return 0
}

function add_module() {
  # thanks to
  # https://github.com/helmuthdu/aui/blob/master/sharedfuncs
  for MODULE in $1; do
    [[ $# -lt 2 ]] && MODULE_NAME="$MODULE" || MODULE_NAME="$2";
    echo "$MODULE" >> /etc/modules-load.d/$MODULE_NAME.conf
    modprobe "$MODULE"
  done
  return 0
}

function add_key() {
  # thanks to
  # https://github.com/helmuthdu/aui/blob/master/sharedfuncs
  pacman-key -r $1
  pacman-key --lsign-key $1
  return 0
}


function add_repository() {
  # thanks to
  # https://github.com/helmuthdu/aui/blob/master/sharedfuncs
  REPO=${1}
  URL=${2}
  [[ -n ${3} ]] && SIGLEVEL="\nSigLevel = ${3}" || SIGLEVEL=""
  
  CHECK_REPO=`grep -F "${REPO}" /etc/pacman.conf`
  if [[ -z $CHECK_REPO ]]; then
    echo -e "\n[${REPO}]${SIGLEVEL}\nServer = ${URL}" >> /etc/pacman.conf
    pacman -Syy
  fi
  return 0
}

function replace_line() {
  # thanks to
  # https://github.com/helmuthdu/aui/blob/master/sharedfuncs
  SEARCH=${1}
  REPLACE=${2}
  FILEPATH=${3}
  FILEBASE=`basename ${3}`
  
  sed -e "s/${SEARCH}/${REPLACE}/" ${FILEPATH} > /tmp/${FILEBASE} 2>"$LOG"
  if [[ ${?} -eq 0 ]]; then
    mv /tmp/${FILEBASE} ${FILEPATH}
  else
    echo "failed: ${SEARCH} - ${FILEPATH}"
  fi
  return 0
}

function dokeymap() {
  #Thanks to
  #http://code.metager.de/source/xref/arch/archboot/usr/share/archboot/keymap/km
  clear
  echo "Scanning for keymaps..."
  ANSWER="/tmp/.km"
  KEYMAPS=
  for i in $(localectl list-keymaps --no-pager); do
    KEYMAPS="${KEYMAPS} ${i} -"
  done
  CANCEL=""
  dialog --menu "Select A Keymap" 22 60 16 ${KEYMAPS} 2>${ANSWER} || CANCEL="1"
  if [[ "${CANCEL}" = "1" ]]; then
    S_NEXTITEM="1"
    return 1
  fi
  KEYMAP=$(cat ${ANSWER})
  echo ${KEYMAP} > keymap.config
  return 0
}

function dolanguage() {
  clear
  declare -a COUNTRYCODE
  COUNTRYCODE[0]="en_US"
  COUNTRYCODE[1]="en_GB"
  COUNTRYCODE[2]="fr_FR"
  COUNTRYCODE[3]="es_ES"
  COUNTRYCODE[4]="de_DE"
  
  ANSWER="/tmp/.ln"
  COUNTRIES=
  for i in "${COUNTRYCODE[@]}"; do
    COUNTRIES="${COUNTRIES} ${i} -"
  done
  CANCEL=""
  dialog --menu "Select A Localisation" 22 60 16 ${COUNTRIES} 2>${ANSWER} || CANCEL="1"
  if [[ "${CANCEL}" = "1" ]]; then
    S_NEXTITEM="1"
    return 1
  fi
  LANGUAGE=$(cat ${ANSWER})
  echo ${LANGUAGE} > locale.config
  unset COUNTRYCODE
  return 0
}

function load_configs() {
  KEYMAP=$(<keymap.config)
  TIMEZONE=$(<timezone.config)
  HOSTNAME=$(<hostname.config)
  LANGUAGE=$(<locale.config)
  return 0
}

function dotimezone() {
  clear
  echo "Scanning for timezones..."
  ANSWER="/tmp/.tz"
  TIMEZONES=
  for i in $(timedatectl list-timezones --no-pager); do
    TIMEZONES="${TIMEZONES} ${i} -"
  done
  CANCEL=""
  dialog --menu "Select A TIMEZONE" 22 60 16 ${TIMEZONES} 2>${ANSWER} || CANCEL="1"
  if [[ "${CANCEL}" = "1" ]]; then
    S_NEXTITEM="1"
    return 1
  fi
  TIMEZONE=$(cat ${ANSWER})
  echo ${TIMEZONE} > timezone.config
  return 0
}

function enter_hostname() {
  clear
  echo "******************************************************"
  echo "***********   Please enter the Hostname    ***********"
  echo "******************************************************"
  echo ""
  sleep 2
  read -p "Enter hostname : " HOSTNAME
  echo ${HOSTNAME} > hostname.config
}

function get_total_hdd_size() {
  TOTAL_HDD_SIZE=$(fdisk -l $1 |grep "Disk "$1":" | head -n 2 | tail -n 1 | cut -d " " -f 5)
  TOTAL_HDD_SIZE=$(($TOTAL_HDD_SIZE / 1024))
  #HDD SIZE IN MB
  TOTAL_HDD_SIZE=$(($TOTAL_HDD_SIZE / 1024))
  return 0
}

function get_total_ram_size() {
  TOTAL_RAM_SIZE=$(grep MemTotal /proc/meminfo | awk '{print $2}')
  #RAM SIZE IN MB
  TOTAL_RAM_SIZE=$(($TOTAL_RAM_SIZE / 1024))
  return 0
}

function calc_optimal_patition_size() {
#  TOTAL_HDD_SIZE=$(($TOTAL_HDD_SIZE - $BOOT_SIZE))
   ROOT_SIZE=$(($TOTAL_HDD_SIZE * 100 / 100))
#  HOME_SIZE=$(($TOTAL_HDD_SIZE - $ROOT_SIZE))
  return 0
}

function arch_chroot() {
  arch-chroot $ARCH_ROOT /bin/bash -c "${1}"
  return 0
}

function partitioning() {
  clear
  echo "******************************************************"
  echo "***************   Auto Partitioning!   ***************"
  echo "******************************************************"
  echo ""
  sleep 2
#  calc_optimal_swap_size
  echo "On which drive you want to install Arch?"
  eval CHOISE_ARRAY=("/dev/"$(lsblk | grep disk | cut -d" " -f1) )
  choise_menu
  
  
  HDD_NAME=${CHOISE_ARRAY[$RESULT - 1]}
  echo $HDD_NAME
  get_total_hdd_size $HDD_NAME
  calc_optimal_patition_size
  echo '-----------------------'
#  echo 'boot: '$BOOT_SIZE ' MB'
   echo 'root: '$ROOT_SIZE ' MB'
#  echo 'home: '$HOME_SIZE ' MB'
#  echo ''
#  echo 'swap: '$SWAP_SIZE ' MB'
  echo '-----------------------'
  
  #Back to KB Sizes
#  BOOT_SIZE=$(($BOOT_SIZE * 1024))
   ROOT_SIZE=$(($ROOT_SIZE * 1024))
#  HOME_SIZE=$(($HOME_SIZE * 1024))
#  SWAP_SIZE=$(($SWAP_SIZE * 1024))
  
  #Wiping the entire disk
  dd if=/dev/zero of=$HDD_NAME  bs=512  count=1
  
  touch /tmp/fdisk.input
  echo -e "n\np\n1\n\n+"$ROOT_SIZE"K\nw" > /tmp/fdisk.input
  
  # Create Partitions
  fdisk $HDD_NAME < /tmp/fdisk.input
  
  # Remove fdisk.input file
  rm /tmp/fdisk.input
  

   mkfs.ext4 -L root $HDD_NAME'1'
  
 
  #mount all patitions
   mount $HDD_NAME'1' /mnt
 
  #clean
  unset_menu_items
  return 0
}

function install_base() {
  clear
  echo "******************************************************"
  echo "***************  Install Base System!  ***************"
  echo "******************************************************"
  echo ""
  sleep 2
  pacstrap /mnt base base-devel
  genfstab -p /mnt > /mnt/etc/fstab
  echo $HOSTNAME > /mnt/etc/hostname
  echo 'LANG='$LANGUAGE'.UTF-8' > /mnt/etc/locale.conf
  echo 'LC_COLLATE=C' >> /mnt/etc/locale.conf
  echo 'KEYMAP='$KEYMAP > /mnt/etc/vconsole.conf
  arch_chroot 'ln -s /usr/share/zoneinfo/'$TIMEZONE' /etc/localtime'
  arch_chroot 'rm -rf /etc/locale.gen'
  arch_chroot 'touch /etc/locale.gen'
  echo $LANGUAGE'.UTF-8 UTF-8' > /mnt/etc/locale.gen
  
  #Set locales
  #Steam workaround
  if [ $LANGUAGE = "en_US" ]
  then
    echo "OK!"
  else
    echo 'en_US.UTF-8 UTF-8' >> /mnt/etc/locale.gen
  fi
  
  #create locales
  arch_chroot 'locale-gen'
  
  #enable mutilib
  MULTILIB=''
  ARCH=$(uname -m)
  if [ $ARCH = "x86_64" ]
  then
    MULTILIB=`grep -n "\[multilib\]" /mnt/etc/pacman.conf | cut -f1 -d:`
    if [ -z $MULTILIB ]
    then
      echo -e "\n[multilib]\nInclude = /etc/pacman.d/mirrorlist" >> /mnt/etc/pacman.conf
    else
      sed -i "${MULTILIB}s/^#//" /mnt/etc/pacman.conf
      local MULTILIB=$(( $MULTILIB + 1 ))
      sed -i "${MULTILIB}s/^#//" /mnt/etc/pacman.conf
    fi
  fi
  
  arch_chroot 'pacman -Syy'
  
  #create Linux Kernel
  arch_chroot 'mkinitcpio -p linux'
  
  #configure Clock
  arch_chroot "hwclock --systohc --utc"
  
  #Enable Grub
  arch_chroot 'pacman --noconfirm -S grub'
  arch_chroot 'grub-install --target=i386-pc --recheck --debug '${HDD_NAME}
  arch_chroot 'grub-mkconfig -o /boot/grub/grub.cfg'
  
  #SET Root password
  arch_chroot 'passwd'
  
  
  cd
  cp -r archfix-edit/ /mnt/root/
  
   umount $HDD_NAME'1'
#  umount $HDD_NAME'3'
#  umount $HDD_NAME'4'
  
#  reboot #<< end
  return 0
}

first_choise

